/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* flat(Node* a, Node* b){
	a->next=NULL;
	Node* temp = new Node(0);
	temp->next=NULL;
	temp->child=NULL;
	Node* res=temp;
	while(a!=NULL && b!=NULL){
		if(a->data < b->data){
			temp->child=a;
			temp=temp->child;
			a=a->child;
		}
		else{
			temp->child=b;
			temp=temp->child;
			b=b->child;
		}
	}

	if(a){
		temp->child=a;
	}
	else{
		temp->child=b;
	}
	return res->child;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head==NULL || head->next==NULL){//if reach last node
		return head;
	}
	head->next=flattenLinkedList(head->next);
	head=flat(head,head->next);
	return head;
}
